import { Router } from 'express';
import { z } from 'zod';
import { db } from '../index';
import { AppError } from '../utils/errors';

const router = Router();

const summarySchema = z.object({
  district_id: z.string()
});

// GET /api/v1/summary?district_id=UP_AGR
router.get('/', async (req, res, next) => {
  try {
    const { district_id } = summarySchema.parse(req.query);

    // Get latest 2 months for comparison
    const metricsResult = await db.query(
      `SELECT * FROM monthly_metrics
       WHERE district_id = $1
       ORDER BY year DESC, month DESC
       LIMIT 2`,
      [district_id]
    );

    if (metricsResult.rows.length === 0) {
      throw new AppError('No data found for district', 404);
    }

    const [current, previous] = metricsResult.rows;

    // Get district info
    const districtResult = await db.query(
      `SELECT district_name, district_name_hi FROM districts WHERE district_id = $1`,
      [district_id]
    );

    // Get state average for comparison
    const stateAvgResult = await db.query(
      `SELECT 
        AVG(person_days) as avg_person_days,
        AVG(payments_on_time_pct) as avg_payment_pct
       FROM monthly_metrics
       WHERE year = $1 AND month = $2`,
      [current.year, current.month]
    );

    const stateAvg = stateAvgResult.rows[0];

    // Calculate status indicators
    const personDaysChange = previous ? 
      ((current.person_days - previous.person_days) / previous.person_days * 100) : 0;

    const status = {
      overall: getOverallStatus(current, stateAvg),
      person_days: getMetricStatus(personDaysChange),
      payments: getPaymentStatus(current.payments_on_time_pct)
    };

    // Generate audio URLs (pre-generated by worker)
    const audioUrls = {
      summary: `${process.env.S3_BASE_URL}/audio/${district_id}_${current.year}_${current.month}_summary.mp3`,
      person_days: `${process.env.S3_BASE_URL}/audio/metric_person_days.mp3`,
      payments: `${process.env.S3_BASE_URL}/audio/metric_payments.mp3`
    };

    res.json({
      success: true,
      district: districtResult.rows[0],
      current_month: {
        year: current.year,
        month: current.month,
        metrics: {
          households_work: current.households_work,
          person_days: current.person_days,
          avg_days_per_household: current.avg_days_per_household,
          payments_on_time_pct: current.payments_on_time_pct
        }
      },
      comparison: {
        vs_previous_month: previous ? {
          person_days_change_pct: personDaysChange.toFixed(2),
          households_change_pct: (
            (current.households_work - previous.households_work) / 
            previous.households_work * 100
          ).toFixed(2)
        } : null,
        vs_state_avg: {
          person_days_diff_pct: (
            (current.person_days - stateAvg.avg_person_days) / 
            stateAvg.avg_person_days * 100
          ).toFixed(2),
          payment_pct_diff: (
            current.payments_on_time_pct - stateAvg.avg_payment_pct
          ).toFixed(2)
        }
      },
      status,
      audio_urls: audioUrls,
      last_updated: current.last_updated
    });
  } catch (error) {
    next(error);
  }
});

function getOverallStatus(current: any, stateAvg: any): string {
  const score = (
    (current.person_days > stateAvg.avg_person_days ? 1 : 0) +
    (current.payments_on_time_pct > stateAvg.avg_payment_pct ? 1 : 0) +
    (current.payments_on_time_pct >= 90 ? 1 : 0)
  );
  
  if (score >= 2) return 'good';
  if (score === 1) return 'average';
  return 'needs_attention';
}

function getMetricStatus(changePercent: number): string {
  if (changePercent > 5) return 'improving';
  if (changePercent < -5) return 'declining';
  return 'stable';
}

function getPaymentStatus(pct: number): string {
  if (pct >= 95) return 'excellent';
  if (pct >= 90) return 'good';
  if (pct >= 85) return 'average';
  return 'poor';
}

export default router;
